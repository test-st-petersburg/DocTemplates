name: Release to GihHub

on:
  push:
    # branches:
    #   - master

    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  actions: read
  contents: write
  deployments: write
  issues: write

jobs:
  release:
    name: Release to GihHub
    # needs: []
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.3.5
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "8"
          check-latest: true

      - name: Install required PowerShell and NuGet modules
        shell: powershell
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted;
          Install-Module -Name InvokeBuild | Out-Null;
          Install-Module -Name 7Zip4Powershell | Out-Null;
          Install-Module -Name PowerShellForGitHub | Out-Null;
          Register-PackageSource -Name 'nuget.org' -Location 'https://api.nuget.org/v3/index.json' -ProviderName NuGet -Trusted -Force | Out-Null;
          Install-Package -Name 'Saxon-HE' -MinimumVersion '9.8' -MaximumVersion '9.8.999' -ProviderName NuGet | Out-Null;
          Install-Package -Name 'QRCoder' -ProviderName NuGet -SkipDependencies | Out-Null;

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.10
        with:
          useConfigFile: true

      - name: Build .ott and .odt files
        id: build
        shell: powershell
        run: |
          Import-Module -Name InvokeBuild | Out-Null;
          Invoke-Build -Task Build -Version '${{ steps.gitversion.outputs.semVer }}';
          $assetsContainerPath = 'tmp/templatesAndDocs.zip';
          Compress-Archive -Path 'output' -DestinationPath $assetsContainerPath -Verbose;
          echo "::set-output name=assetsContainerPath::$assetsContainerPath"

      - name: Generate release notes
        id: generate_release_notes
        shell: powershell
        run: |
          $releaseNotesPath = 'tmp/ReleaseNotes.md';
          $ChangeLog = ( Get-Content -Path './CHANGELOG.md' -Encoding UTF8 );
          $releaseNotes = @( $ChangeLog | ForEach-Object `
            -Begin {
              $isExpectedSection = $false;
            } `
            -Process {
              $isReleaseSectionHeader = ( $_ -match '##\s+(?:(?<version>\d+\.\d+\.\d+)|\[(?<version>\d+\.\d+\.\d+)\])' );
              if ( $isReleaseSectionHeader ) {
                $releaseVersion = $Matches[ 'version' ];
                $isExpectedSection = ( $releaseVersion -eq '${{ steps.gitversion.outputs.semVer }}' );
              } else {
                if ( $isExpectedSection ) { return $_; };
              };
            }
          ) -join "`r`n";
          $releaseNotes | Out-File -Encoding utf8 -FilePath $releaseNotesPath -NoNewLine;
          echo "::set-output name=releaseNotesPath::$releaseNotesPath";

      - name: Search GitHub Milestone
        id: milestone_search
        shell: powershell
        run: |
          Import-Module -Name PowerShellForGitHub | Out-Null;
          Write-Verbose 'Configure PowerShellForGitHub...';
          $GitHubToken = ( ConvertTo-SecureString -String '${{ github.token }}' -AsPlainText -Force );
          Set-GitHubAuthentication -Credential ( New-Object System.Management.Automation.PSCredential 'username is ignored', $GitHubToken ) -SessionOnly;
          Set-GitHubConfiguration -DefaultOwnerName '${{ github.repository_owner }}' -DefaultRepositoryName '${{ github.event.repository.name }}' -SessionOnly;
          $milestones = Get-GitHubMilestone `
            -OwnerName '${{ github.repository_owner }}' -RepositoryName '${{ github.event.repository.name }}' `
            -State All;
          $currentMilestone = $milestones | Where-Object -Property title -EQ '${{ steps.gitversion.outputs.semVer }}';
          if ( $currentMilestone ) {
            echo "::set-output name=exists::${{ true }}";
            echo "::set-output name=url::$( $currentMilestone.html_url )";
            echo "::set-output name=title::$( $currentMilestone.title )";
            echo "::set-output name=number::$( $currentMilestone.MilestoneNumber )";
          } else {
            echo "::set-output name=exists::${{ false }}";
          };

      - name: Create GitHub Release
        id: release
        shell: powershell
        run: |
          Import-Module -Name PowerShellForGitHub | Out-Null;
          Write-Verbose 'Configure PowerShellForGitHub...';
          $GitHubToken = ( ConvertTo-SecureString -String '${{ github.token }}' -AsPlainText -Force );
          Set-GitHubAuthentication -Credential ( New-Object System.Management.Automation.PSCredential 'username is ignored', $GitHubToken ) -SessionOnly;
          Set-GitHubConfiguration -DefaultOwnerName '${{ github.repository_owner }}' -DefaultRepositoryName '${{ github.event.repository.name }}' -SessionOnly;
          $releaseNotes = ( Get-Content -Path '${{ steps.generate_release_notes.outputs.releaseNotesPath }}' -Encoding UTF8 -Raw );
          if ( $${{ steps.milestone_search.outputs.exists == 'true' }} ) {
            $releaseDescription = `
              "[![${{ steps.milestone_search.outputs.title }}](https://img.shields.io/badge/milestone-${{ steps.milestone_search.outputs.title }}-blue?style=plastic&logo=github)](${{ steps.milestone_search.outputs.url }})" +
              "`r`n`r`n" + $releaseNotes;
          } else {
            $releaseDescription = $releaseNotes;
          };
          $release = Get-GitHubRelease `
            -Tag '${{ steps.gitversion.outputs.semVer }}' `
            -ErrorAction SilentlyContinue;
          if ( $release ) {
            Remove-GitHubRelease -Release ( $release.ID ) -Force;
          };
          $release = New-GitHubRelease `
            -Tag '${{ steps.gitversion.outputs.semVer }}' `
            -Name '${{ steps.gitversion.outputs.semVer }}' `
            -Body $releaseDescription `
            -Committish '${{ github.sha }}' `
            -Verbose;
          echo "::set-output name=url::$( $release.html_url )";
          echo "::set-output name=tag_name::$( $release.tag_name )";
          Write-Verbose 'Adding produced files...';
          $asset = New-GitHubReleaseAsset -Release ( $release.ID ) -Path '${{ steps.build.outputs.assetsContainerPath }}' -Verbose;
          # Get-ChildItem -Path 'output/template'-Recurse -Filter '*.ott' | ForEach-Object {
          #   $release | New-GitHubReleaseAsset -Path ( $_.FullName ) -ContentType 'application/vnd.oasis.opendocument.text-template' -Verbose;
          # };
          # Get-ChildItem -Path 'output/doc'-Recurse -Filter '*.odt' | ForEach-Object {
          #   $release | New-GitHubReleaseAsset -Path ( $_.FullName ) -ContentType 'application/vnd.oasis.opendocument.text' -Verbose;
          # };

      - name: Close GitHub Milestone
        if: steps.milestone_search.outputs.exists == 'true'
        shell: powershell
        run: |
          Import-Module -Name PowerShellForGitHub | Out-Null;
          Write-Verbose 'Configure PowerShellForGitHub...';
          $GitHubToken = ( ConvertTo-SecureString -String '${{ github.token }}' -AsPlainText -Force );
          Set-GitHubAuthentication -Credential ( New-Object System.Management.Automation.PSCredential 'username is ignored', $GitHubToken ) -SessionOnly;
          Set-GitHubConfiguration -DefaultOwnerName '${{ github.repository_owner }}' -DefaultRepositoryName '${{ github.event.repository.name }}' -SessionOnly;
          $releaseNotes = ( Get-Content -Path '${{ steps.generate_release_notes.outputs.releaseNotesPath }}' -Encoding UTF8 -Raw );
          $releaseDescription = `
            "[![${{ steps.release.outputs.tag_name }}](https://img.shields.io/badge/release-${{ steps.release.outputs.tag_name }}-blue?style=plastic&logo=github)](${{ steps.release.outputs.url }})" +
            "`r`n`r`n" + $releaseNotes;
          Set-GitHubMilestone `
            -OwnerName '${{ github.repository_owner }}' -RepositoryName '${{ github.event.repository.name }}' `
            -Milestone ${{ steps.milestone_search.outputs.number }} `
            -Title '${{ steps.gitversion.outputs.semVer }}' `
            -State Closed `
            -Description $releaseDescription `
            -DueOn ( Get-Date ) `
            -Verbose;
